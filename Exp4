def a_star(grid, start, goal):
  
    def heuristic(a, b):
        """Calculate Manhattan distance between points a and b."""
        return abs(a[0] - b[0]) + abs(a[1] - b[1])

    open_list = [start]
    came_from = {}  # Track the parent of each node
    g_score = {start: 0}  # Cost from start to each node
    f_score = {start: heuristic(start, goal)}  # Estimated cost to goal

    while open_list:
        # Get the node with the lowest f_score
        current = min(open_list, key=lambda x: f_score.get(x, float('inf')))

        if current == goal:
            # Reconstruct the path
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            return path[::-1]  # Return reversed path

        open_list.remove(current)

        # Explore neighbors
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:  # Directions: Up, Down, Left, Right
            neighbor = (current[0] + dx, current[1] + dy)

            if (
                0 <= neighbor[0] < len(grid) and
                0 <= neighbor[1] < len(grid[0]) and
                grid[neighbor[0]][neighbor[1]] == 0  # Check if neighbor is walkable
            ):
                tentative_g_score = g_score[current] + 1

                if tentative_g_score < g_score.get(neighbor, float('inf')):
                    # Update scores and path
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal)
                    if neighbor not in open_list:
                        open_list.append(neighbor)

    return None  # Return None if no path is found

# Example usage:
grid = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0],
]

start = (0, 0)  # Starting point
goal = (4, 4)  # Goal point

path = a_star(grid, start, goal)
if path:
    print("Path found:", path)
else:
    print("No path found.")
