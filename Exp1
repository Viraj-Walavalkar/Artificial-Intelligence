from collections import deque


goal_state = [1, 2, 3, 4, 5, 6, 7, 8, 0]

moves = {
    'up': -3,
    'down': 3,
    'left': -1,
    'right': 1

def get_neighbors(state):
    neighbors = []
    zero_index = state.index(0)

    row, col = divmod(zero_index, 3)


    for direction, move in moves.items():
        new_index = zero_index + move

        if direction == 'up' and row > 0 or \
           direction == 'down' and row < 2 or \
           direction == 'left' and col > 0 or \
           direction == 'right' and col < 2:

            new_state = state[:]
            new_state[zero_index], new_state[new_index] = new_state[new_index], new_state[zero_index]
            neighbors.append(new_state)

    return neighbors

# BFS - Breadth-First Search
def bfs(start_state):
    queue = deque([start_state])
    visited = set()

    while queue:
        state = queue.popleft()
        if state == goal_state:
            return state

        visited.add(tuple(state))

        for neighbor in get_neighbors(state):
            if tuple(neighbor) not in visited:
                queue.append(neighbor)
    return None

# DFS - Depth-First Search
def dfs(start_state):
    stack = [start_state]
    visited = set()

    while stack:
        state = stack.pop()
        if state == goal_state:
            return state

        visited.add(tuple(state))
        for neighbor in get_neighbors(state):
            if tuple(neighbor) not in visited:
                stack.append(neighbor)
    return None

start_state = [1, 2, 3, 4, 5, 6, 0, 7, 8

print("BFS Result:")
print(bfs(start_state))

print("\nDFS Result:")
print(dfs(start_state))
