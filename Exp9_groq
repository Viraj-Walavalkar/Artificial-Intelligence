!pip install groq


from groq import Groq

# Hardcoded credentials
GROQ_API_KEY = "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"

# Function to initialize the Groq client
def initialize_groq_client(api_key):
    try:
        return Groq(api_key=api_key)
    except Exception as e:
        print(f"Error initializing Groq client: {e}")
        return None

# Function to generate assistant response
def assistant_response(client, input_text, context=None):
    system_prompt = "You are a helpful customer care assistant for Amazon. Provide clear and concise solutions to customer queries regarding orders, returns, refunds, shipping, and other Amazon services."

    conversation = f"{context}\nCustomer: {input_text}\nAssistant:" if context else f"Customer: {input_text}\nAssistant:"

    try:
        chat_completion = client.chat.completions.create(
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": conversation}
            ],
            model="llama3-70b-8192",
            temperature=0.5
        )
        response = chat_completion.choices[0].message.content
        return response
    except Exception as e:
        print(f"Error generating chat completion: {e}")
        return "An error occurred while generating the response."

# Main logic
def main():
    # Initialize Groq client
    client_groq = initialize_groq_client(GROQ_API_KEY)
    if client_groq is None:
        print("Failed to initialize the Groq client. Please check your API key.")
        return

    print("Welcome to the Amazon Customer Care Assistant!")
    context = ""  # Store conversation history

    while True:
        # Get user input
        user_input = input("Customer: ")
        if user_input.lower() in ["exit", "quit"]:
            print("Assistant: Thank you for reaching out to Amazon Customer Care. Have a great day!")
            break

        # Generate assistant response
        try:
            full_response = assistant_response(client_groq, user_input, context=context)
            print(f"Assistant: {full_response}")
            # Update context with the latest conversation
            context += f"Customer: {user_input}\nAssistant: {full_response}\n"
        except Exception as e:
            print(f"An error occurred while generating the response: {e}")

if __name__ == "__main__":
    main()
